import { readFileSync, writeFileSync } from 'node:fs'
import { execSync } from 'node:child_process'
import { execPath } from 'node:process'
import { join, resolve } from 'node:path'
import { toc, compactEmptyLines, transcludeFile } from '@thi.ng/transclude'
import { DEBUG_PREFIX } from './src/constants.js'
// import { markdownTableFromZodSchema } from './src/lib.js'

const package_json = JSON.parse(readFileSync('package.json', 'utf-8'))

const author = package_json.author
const pkg_name = package_json.name as string
const [npm_scope, unscoped_pkg_name] = pkg_name.split('/')
const github_username = npm_scope as string

const pkg_root = '.'
const lib_js = resolve(pkg_root, 'dist', 'lib.js')
const schemas_mjs = resolve(pkg_root, 'fixtures', 'schemas.mjs')

interface CalloutConfig {
  // https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md#table-of-contents
  // https://github.com/ikatyang/emoji-cheat-sheet
  // https://gist.github.com/rxaviers/7360908
  emoji: string
  title: string
  message: string
}

const callout = (cfg: CalloutConfig) => {
  const paragraphs = cfg.message.split('\n\n')
  const body = paragraphs.map((p) => `> ${p}`).join('\n>\n')

  const lines = [`> ${cfg.emoji} **${cfg.title}**`, '\n', `>`, '\n', body]
  return lines.join('')
}

const readme = transcludeFile(join(pkg_root, 'tpl.readme.md'), {
  user: author,
  templates: {
    'pkg.deps': () => {
      const entries = Object.entries(package_json.dependencies)

      const links = entries.map(
        ([name]) => `[${name}](https://www.npmjs.com/package/${name})`
      )
      const list = links.map((link) => `- ${link}`).join('\n')

      const rows = entries.map(
        ([name, version]) =>
          `| [${name}](https://www.npmjs.com/package/${name}) | \`${version}\` |`
      )
      const table = [`| Package | Version |`, '|---|---|', rows].join('\n')

      return [`## Dependencies`, '\n\n', table].join('')
    },

    'pkg.about': () => `## About\n\n${package_json.description}`,

    'pkg.docs': () => {
      const lines = [
        `## Docs`,
        '\n\n',
        `[Docs generated by TypeDoc](https://${github_username}.github.io/${unscoped_pkg_name}/index.html)`,
        '\n\n',
        callout({
          emoji: ':information_source:',
          title: 'API Docs',
          message: `This project uses [API Extractor](https://api-extractor.com/) and [api-documenter markdown](https://api-extractor.com/pages/commands/api-documenter_markdown/) to generate a bunch of markdown files and a \`.d.ts\` rollup file containing all type definitions consolidated into a single file. I don't find this \`.d.ts\` rollup file particularly useful. On the other hand, the markdown files that api-documenter generates are quite handy when reviewing the public API of this project.\n\n*See [Generating API docs](https://api-extractor.com/pages/setup/generating_docs/) if you want to know more*.`
        })
      ]
      return lines.join('')
    },

    'pkg.installation': () => {
      const lines = [
        `## Installation`,
        '\n\n',
        `\`\`\`sh`,
        '\n',
        `npm install --save-dev ${pkg_name}`,
        '\n',
        `\`\`\``
      ]
      return lines.join('')
    },

    'pkg.license': ({ user }) => {
      // https://gist.github.com/lukas-h/2a5d00690736b4c3a7ba
      const lines = [`## License`, '\n\n']
      if (package_json.license === 'MIT') {
        lines.push(
          `[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)`
        )
      } else {
        throw new Error(`This license is not yet implemented`)
      }

      //   lines.push(`\n\n`)
      //   lines.push(`[${user.name}](${user.url})`)

      return lines.join('')
    },

    'table.car': () => {
      const schema_name = 'car'
      const esm = `
      import { ${schema_name} as schema } from '${schemas_mjs}'
      import { markdownTableFromZodSchema } from '${lib_js}'

      const { error, value: table } = markdownTableFromZodSchema(schema)
      console.log(table) // send to stdout
      `

      try {
        const res = execSync(`${execPath} --input-type=module --eval "${esm}"`)
        return res.toString()
      } catch (err) {
        return callout({
          emoji: ':warning:',
          title: `Could not generate table from Zod schema \`${schema_name}\``,
          message: err.stderr.toString()
        })
      }
    },

    'table.tire': () => {
      const schema_name = 'car_tire'
      const esm = `
      import { ${schema_name} as schema } from '${schemas_mjs}'
      import { markdownTableFromZodSchema } from '${lib_js}'

      const { error, value: table } = markdownTableFromZodSchema(schema)
      console.log(table) // send to stdout
      `

      try {
        const res = execSync(`${execPath} --input-type=module --eval "${esm}"`)
        return res.toString()
      } catch (err) {
        return callout({
          emoji: ':warning:',
          title: `Could not generate table from Zod schema \`${schema_name}\``,
          message: err.stderr.toString()
        })
      }
    },

    troubleshooting: () => {
      const lines = [
        `## Troubleshooting`,
        '\n\n',
        `This plugin uses the [debug](https://github.com/debug-js/debug) library for logging.`,
        `You can control what's logged using the \`DEBUG\` environment variable.`,
        '\n',
        `For example, if you set your environment variables in a \`.envrc\` file, you can do:`,
        '\n',
        `\`\`\`sh`,
        `# print all logging statements`,
        `export DEBUG=${DEBUG_PREFIX}:*`,
        `\`\`\``
      ]
      return lines.join('\n')
    }
  },
  post: [toc(), compactEmptyLines]
})

// console.log('=== README.md BEGIN ===')
// console.log(readme.src)
// console.log('=== README.md END ===')
writeFileSync(join(pkg_root, 'README.md'), readme.src)
