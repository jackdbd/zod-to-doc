import assert from 'node:assert'
import { describe, it } from 'node:test'
import { z } from 'zod'
import { arrayFromZodSchema, markdownTableFromZodSchema } from '../dist/lib.js'
import {
  car,
  car_manufacturer,
  car_model,
  car_tire,
  car_tire_manufacturer,
  car_tire_pressure,
  year
} from '../fixtures/schemas.mjs'

// TODO: add tests that use zod schemas generated by zocker

describe('arrayFromZodSchema', () => {
  it('returns an error when the schema is a z.number()', () => {
    const res = arrayFromZodSchema(year)

    assert.notEqual(res.error, undefined)
    assert.equal(res.value, undefined)
  })

  it('returns an error when the schema is a z.string()', () => {
    const res = arrayFromZodSchema(car_model)

    assert.notEqual(res.error, undefined)
    assert.equal(res.value, undefined)
  })

  it('returns an array with the expected keys, and no error, when the schema is a z.object()', () => {
    const { error, value: arr } = arrayFromZodSchema(car_tire)

    assert.equal(error, undefined)
    assert.notEqual(arr, undefined)
    assert.equal(arr.length, 2)
    const keys = arr.map((d) => d.key)
    assert.equal(keys.includes('manufacturer'), true)
    assert.equal(keys.includes('pressure'), true)
  })

  it('mentions the length of an array in the description', () => {
    const { error, value: arr } = arrayFromZodSchema(car)

    assert.equal(error, undefined)
    assert.notEqual(arr, undefined)

    assert.equal(arr.length, 4)
    const keys = arr.map((d) => d.key)
    assert.equal(keys.includes('manufacturer'), true)
    assert.equal(keys.includes('model'), true)
    assert.equal(keys.includes('tires'), true)
    assert.equal(keys.includes('year'), true)

    const desc = arr.find((d) => d.key === 'tires').description
    assert.match(desc, /4 elements/)
  })
})

describe.skip('markdownTableFromZodSchema', () => {
  it('returns an error when the schema is a z.number()', () => {
    const res = markdownTableFromZodSchema(year)

    assert.notEqual(res.error, undefined)
    assert.equal(res.value, undefined)
  })

  it('returns an error when the schema is a z.string()', () => {
    const res = markdownTableFromZodSchema(car_model)

    assert.notEqual(res.error, undefined)
    assert.equal(res.value, undefined)
  })

  it('returns a markdown table with the expected headers and no error, when the schema is a z.object()', () => {
    const { error, value: md } = markdownTableFromZodSchema(car_tire)

    assert.equal(error, undefined)
    assert.notEqual(md, undefined)
    assert.match(md, new RegExp('\\| Key \\| Default \\| Description \\|'))
    assert.match(md, new RegExp('\\|---\\|---\\|---\\|'))
  })

  it('returns the expected table rows and no error, when the schema is a simple z.object()', () => {
    const { error, value: md } = markdownTableFromZodSchema(car_tire)

    assert.equal(error, undefined)
    assert.match(
      md,
      new RegExp(
        '\\`manufacturer\\` \\| \\`undefined\\` \\| Car tire manufacturer \\|'
      )
    )
    assert.match(
      md,
      new RegExp(
        '\\`pressure\\` \\| \\`undefined\\` \\| Car tire pressure in PSI \\|'
      )
    )
  })

  it('returns the expected table rows and no error, when the schema is a complex z.object()', () => {
    const { error, value: md } = markdownTableFromZodSchema(car)
    console.log('ðŸš€ ~ it ~ md:', md)

    assert.equal(error, undefined)
    assert.match(
      md,
      new RegExp(
        '\\`manufacturer\\` \\| \\`undefined\\` \\| Car tire manufacturer \\|'
      )
    )
    assert.match(
      md,
      new RegExp(
        '\\`pressure\\` \\| \\`undefined\\` \\| Car tire pressure in PSI \\|'
      )
    )
  })
})
