{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.43.1",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@jackdbd/zod-to-doc!",
  "docComment": "",
  "name": "@jackdbd/zod-to-doc",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@jackdbd/zod-to-doc!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "@jackdbd/zod-to-doc!arrayFromZodSchema:function(1)",
          "docComment": "/**\n * Converts a Zod schema into an array of objects.\n *\n * @public @experimental\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "arrayFromZodSchema: <S extends "
            },
            {
              "kind": "Reference",
              "text": "z.AnyZodObject",
              "canonicalReference": "zod!AnyZodObject:type"
            },
            {
              "kind": "Content",
              "text": ">(schema: "
            },
            {
              "kind": "Content",
              "text": "S"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "{\n    error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    value?: undefined;\n} | {\n    value: {\n        key: string;\n        default: any;\n        description: string;\n    }[];\n    error?: undefined;\n}"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "schema",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "arrayFromZodSchema"
        },
        {
          "kind": "Function",
          "canonicalReference": "@jackdbd/zod-to-doc!arrayFromZodUnion:function(1)",
          "docComment": "/**\n * Converts a Zod union into an array of strings.\n *\n * @public @experimental\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "arrayFromZodUnion: <S extends "
            },
            {
              "kind": "Reference",
              "text": "z.ZodUnion",
              "canonicalReference": "zod!ZodUnion:class"
            },
            {
              "kind": "Content",
              "text": "<readonly ["
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeAny",
              "canonicalReference": "zod!ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": ", ..."
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeAny",
              "canonicalReference": "zod!ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": "[]]>"
            },
            {
              "kind": "Content",
              "text": ">(schema: "
            },
            {
              "kind": "Content",
              "text": "S"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "{\n    error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    value?: undefined;\n} | {\n    value: string[];\n    error?: undefined;\n}"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "schema",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "arrayFromZodUnion"
        },
        {
          "kind": "Function",
          "canonicalReference": "@jackdbd/zod-to-doc!markdownTableFromZodSchema:function(1)",
          "docComment": "/**\n * Creates a markdown table from a Zod schema.\n *\n * @param schema - The Zod schema to convert.\n *\n * @see\n *\n * [Zod discussions #1953 - Retrieve default values from schema](https://github.com/colinhacks/zod/discussions/1953)\n *\n * @public @experimental\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "markdownTableFromZodSchema: <S extends "
            },
            {
              "kind": "Reference",
              "text": "z.AnyZodObject",
              "canonicalReference": "zod!AnyZodObject:type"
            },
            {
              "kind": "Content",
              "text": ">(schema: "
            },
            {
              "kind": "Content",
              "text": "S"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "{\n    error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    value?: undefined;\n} | {\n    value: string;\n    error?: undefined;\n}"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "schema",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "markdownTableFromZodSchema"
        },
        {
          "kind": "Function",
          "canonicalReference": "@jackdbd/zod-to-doc!stringsFromZodAnyType:function(1)",
          "docComment": "/**\n * Converts any Zod type into an array of strings.\n *\n * @public @experimental\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "stringsFromZodAnyType: (x: "
            },
            {
              "kind": "Reference",
              "text": "ZodTypeAny",
              "canonicalReference": "zod!ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "string[]"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "stringsFromZodAnyType"
        }
      ]
    }
  ]
}
